[
  {
    name: Equipable
    requires: [
      # this is pretty much just a wrapper around all of the more specific checks below.
      # without the "any_equipable" shortcut, this would be a fairly complicated rule...
      # this is also the reason this category should not be inherited (it can still be a parent)
      /*Equipable any_equipable*/
      Types equipable
    ]
  }

  # ###############################
  # Misc ("Second-page") equipables

  {
    name: Grappling Hook
    parent: Equipable
    requires: Equipable grapple
  }

  {
    name: Mount
    parent: Equipable
    requires: Equipable mount
  }

  {
    name: Mine Cart
    parent: Equipable
    requires: Equipable minecart
  }

  {
    name: Light Pet
    parent: Equipable
    requires: Equipable light_pet
  }

  {
    name: Pet
    parent: Equipable
    requires: Equipable vanity_pet
  }

  # ################################
  # Armor

  {
    name: Armor
    parent: Equipable
    # armor doesn't necessarily need to give defense
    requires: Property !vanity
    include: {
      Helm: EquipSlot head
      Cuirass: EquipSlot body
      Greaves: EquipSlot leg
    }
    /*TODO: experimental; if match=false, then items that match this category's requirements but not any of its
    children will NOT be considered matched and will continue to be checked against any remaining categories*/
    match: false
  }

  # ################################
  # Accessories

  // TODO: figure out how to handle some of the corner-cases
  // where a single accy fills multiple slots: e.g. Master Ninja Gear
  {
    name: Accessory
    parent: Equipable
    inherit: null
    requires: Property accessory !vanity
    include:
    {
      &: EquipSlot

      Wings: & wings
      Balloon: & balloon
      Neckwear: & neck
      Shields: & shield
      Boots: & shoe
      "Face Accessory": & face
      "Belt Accessory": & waist
      "Back Accessory": & back

      "Main-Hand Gauntlet": & main_hand
      "Off-Hand Gauntlet": & off_hand
      # Note: there are none of these in Vanilla
      "Front Accessory": & front
    }
  }

  /*
  C:Equipable.Accessory;enable=true; accessory !vanity;;
  C:Equipable.Accessory.Wings;; EquipSlot wings; wingSlot type value name;
  U:Accessory.Gauntlets;enable=false,merge=true; Main-Hand Gauntlet, Off-Hand Gauntlet
   */

  # union of the two hand-types
  {
    name: Gauntlets
    parent: Accessory
    merge: true
    union: [
      Main-Hand Gauntlet
      Off-Hand Gauntlet
    ]
  }


  # ################################
  # Vanity

  {
    name: Vanity Item
    parent: Equipable
    requires: Property vanity
    include:
    {
      &: EquipSlot
      "Vanity Clothing": {
        include: {
          Headwear: & head
          Shirt: & body
          Pants: & leg
        }
      }

      "Vanity Accessory": {
        requires: Property accessory
        include: {
          "Vanity Wings": & wings
          "Fashion Facewear": & face
          "Vanity Neckwear": & neck
          "Vanity Boots": & shoe

          # Note about capes/cloaks:
          # Theyre the ONLY vanilla items that have a value for 'frontSlot',
          # but they're also the only vanilla VANITY items that have a value for
          # 'backSlot'. So...yeah.
          "Capes": & front back

          # NOTE: there are none of these in Vanilla
          "Vanity Balloon": & balloon
          "Vanity Belt": & waist
          "Vanity Shields": & shield

          # NOTE: there are none* of these in Vanilla
          # *see note above about Capes
          "Back Vanity Slot": & back
          "Front Vanity Slot": & front

          "Main-Hand Glove": & main_hand
          "Off-Hand Glove": & off_hand
        }
      }
    }
  }

  // union for the gloves
  {
    name: Gloves
    parent: Vanity Accessory
    merge: true
    union: [
      Main-Hand Glove
      Off-Hand Glove
    ]
  }
]
