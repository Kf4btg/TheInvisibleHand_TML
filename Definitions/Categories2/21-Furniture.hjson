[

  {
    name: Furniture
    parent: Placeable
    sort: [
      createTile
      type
      stack
    ]
    include: {
      "Crafting Station": CreateTile.Furniture crafting_station
      "Container": CreateTile.Furniture container
    }
  }

  /*{
    name: Crafting Station
    parent: Furniture
    requires: CreateTile.Furniture crafting_station
  }

  {
    name: Container
    parent: Furniture
    requires: CreateTile.Furniture container
  }*/

  {
    name: Room Needs
    parent: Furniture
    # use 'include:' to quickly add child categories with
    # simple requirements. The Child will have this category
    # as its parent.
    # Key is the child name. Value is a either
    #   a) a string that is the single item comprising the child's requirements list
    #   b) a simplified Category object that can only contain the "requires" and "include" key.
    # If the child has more than one requirement, you will
    # need to use option b to include the list. With option b,
    # using "include" on a child allows convenient
    # creation of simple hierarchies of nested categories.
    # Note that having spaces in the category name
    # necessitates using quotes.
    include: {

      // if the first entry of an "include" block is a string labeled simply "&", then
      // the value for that entry can be used as a variable in the remaining
      // entries, saving what could be a lot of redundant text
      &: CreateTile.Furniture

      Lighting: {
        // now we can just write "& room_needs_light" instead of "CreateTile.Furniture room_needs_light",
        requires: & room_needs_light
        include: {
          // IMPORTANT: note that the '&' from above trickles down to this nested include: block.
          // It will not "wear off" until all the entries for the include: block in which it was defined
          // have been processed. However, we can define a new value for the variable
          // that will override the original '&' for the children of this block;
          // when the child-block is finished, the original value of the variable will again be in place.
          // Also note that '&' can be cumulative; i.e. we can write "&.Lighting" here, and it will
          // turn into "CreateTile.Furniture.Lighting", since "CreateTile.Furniture" is the current
          // value of '&'
          &: &.Lighting

          // now we can just write "& torch" instead of "CreateTile.Furniture.Lighting torch",
          // and so on for each other entry
          Torch: & torch
          Candelabra: & candelabra
          Candle: & candle
          Lamp: & lamp
          Chandelier: & chandelier
          "Hanging Lantern": & hanging_lantern
          "Holiday Light": & holiday_light
        } }

      // now '&' has returned to the original value of 'CreateTile.Furniture'
      Tables: {
        requires: & room_needs_table
        include: {
          &: &.Tables

          Table: & table
          Bathtub: & bathtub
          Bookcase: & bookcase
          Dresser: & dresser
          Piano: & piano
          "Work Bench": & workbench
        } }
      Doors: {
        requires: & room_needs_door
        include: {
          // sometimes it may not be worth the trouble to set a new '&' variable.
          // So we can just add .Doors to the current value of '&' on a per-line basis
          Door: &.Doors door
          Platform: &.Doors platform
        } }
      Chairs: {
        requires: & room_needs_chair
        include: {
          &: &.Chairs

          Chair: & chair
          Bench: & bench
          Bed: & bed
        } }
    } }
]

/*
  Use the above "Room Needs" category as an example. This will
  create a category-tree w/ the following (partial) structure:

    Furniture
     |--Room Needs
         |--Lighting
         |   |--Torch
         |   |--Candelabra
         |   |--Chandelier
         |   |--Hanging Lantern
         |   |--Lamp
         |   |--Holiday Light
         |
         |--Tables
      ...    |--Table
             |--Bookcase
             |--Dresser
             ...
      ...
 */
