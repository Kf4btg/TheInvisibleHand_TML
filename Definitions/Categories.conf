# Type codes:
# C: normal Category; accepts requirement lists and sorting fields
# U: Union category; accepts list of category names instead of requirements; can accept sorting fields
# S: Sub category: like a normal "C" category, except that instead of a single category being created, a category with the given requirements/sort-rules is generated for every pre-existing child of the specified parent.

C:"Paint"::Property.Ident paint: paint, stack
C:"Bait"::Property.Ident bait:rare, bait, value, type, stack
C:"Coin"::Property.Ident coin: type, stack
C:"Quest Item"::Property quest_item: uniqueStack, name, type, stack

c:"Tool":::rare, type, value

C:"Weapon"::Types weapon: rare, damage, type, value, stack
C:."Melee"::Weapon melee:
C:.."Broadsword"::Weapon.Melee swing, Property.Ident !pick !axe !hammer, Property !no_use_graphic:
C:.."Shortsword"::Weapon.Melee stab:
C:.."Spear"::Weapon.Melee directional spear:
C:.."Flail"::Weapon.Melee directional flail:
C:.."Yoyo"::Weapon.Melee directional yoyo:
C:.."Chain Weapons"::Weapon.Melee chained:
C:.."Melee Thrown"::Weapon.Melee throw:
C:..."Boomerang"::Weapon.Melee boomerang:

C:."Ranged"::Weapon ranged:
C:.."Gun"::Weapon.Ranged use_ammo_bullet:
C:..."Automatic Gun"::Property auto_reuse:
C:.."Bow"::Weapon.Ranged use_ammo_arrow:
C:..."Repeater"::Property auto_reuse:
C:.."Launcher"::Weapon.Ranged use_ammo_rocket:
C:.."Dart Shooter"::Weapon.Ranged use_ammo_dart:
C:.."Flamethrower"::Weapon.Ranged flame_thrower:
C:.."Special"::Weapon.Ranged use_ammo_none:

C:."Magic"::Weapon magic:
C:.."Area"::Weapon.Magic area:
C:.."Controlled"::Weapon.Magic controllable:
C:.."Homing"::Weapon.Magic homing:
C:.."Piercing"::Weapon.Magic pierce:
C:.."Stream"::Weapon.Magic stream:
C:.."Bounce (Heavy)"::Weapon.Magic bounce_heavy:
C:.."Bounce (Hyper)"::Weapon.Magic bounce_hyper:
# union category:
U:.."Bouncing";merge=true:"Bounce (Heavy)", "Bounce (Hyper)":

C:."Summon"::Weapon summon:rare, damage, shoot, value
C:.."Minion"::Weapon.Summon minion:
# this is about the only way to tell them apart...
C:.."Sentry"::Weapon.Summon !minion:

C:."Throwing"::Weapon throwing:

C:"Ammo"::Property.Ident ammo:ammo, damage, type, stack
C:."Arrows"::Ammo arrow:
C:."Bullets"::Ammo bullet:
C:."Rockets"::Ammo rocket:
C:."Darts"::Ammo dart:
C:."Solution"::Ammo solution:
# this generates subcategories for all children of the specified parent:
S:."Endless"::Property !consumable:

C:"Placeable"::Types placeable:
C:."Banner"::CreateTile banner:
C:."Herb Seed"::CreateTile herb:
C:."Music Box"::CreateTile music_box:

c:."Furniture":::createTile type stack
c:.."Crafting Station"::CreateTile.Furniture crafting_station:
c:.."Container"::CreateTile.Furniture container:

c:.."RoomNeeds":::

c:..."Lighting"::CreateTile.Furniture room_needs_light:
c:...."Torch"::CreateTile.Furniture.Lighting torch:
c:...."Candelabra"::CreateTile.Furniture.Lighting candelabra:
c:...."Candle"::CreateTile.Furniture.Lighting candle:
c:...."Chandelier"::CreateTile.Furniture.Lighting chandelier:
c:...."Lamp"::CreateTile.Furniture.Lighting lamp:
c:...."Hanging Lantern"::CreateTile.Furniture.Lighting hanging_lantern:
c:...."Holiday Light"::CreateTile.Furniture.Lighting holiday_light:

c:..."Tables"::CreateTile.Furniture room_needs_table:
c:...."Table"::CreateTile.Furniture.Tables table:
c:...."Bathtub"::CreateTile.Furniture.Tables bathtub:
c:...."Bookcase"::CreateTile.Furniture.Tables bookcase:
c:...."Dresser"::CreateTile.Furniture.Tables dresser:
c:...."Piano"::CreateTile.Furniture.Tables piano:
c:...."Work Bench"::CreateTile.Furniture.Tables workbench:

c:..."Doors"::CreateTile.Furniture room_needs_door:
c:...."Door"::CreateTile.Furniture.Doors door:
c:...."Platform"::CreateTile.Furniture.Doors platform:

c:..."Chairs"::CreateTile.Furniture room_needs_chair:
c:...."Chair"::CreateTile.Furniture.Chairs chair:
c:...."Bench"::CreateTile.Furniture.Chairs bench:
c:...."Bed"::CreateTile.Furniture.Chairs bed:

c:.."Wall Decoration"::CreateTile.Furniture wall_decoration:
c:..."Painting"::CreateTile.Furniture.WallDecor painting:
c:..."Trophy"::CreateTile.Furniture.WallDecor trophy:
c:..."Rack"::CreateTile.Furniture.WallDecor rack:

c:.."Misc Furniture":::
c:..."Anvil"::CreateTile.Furniture.Misc anvil:
c:..."Bottle"::CreateTile.Furniture.Misc bottle:
c:..."Grandfather Clock"::CreateTile.Furniture.Misc grandfather_clock:
c:..."Campfire"::CreateTile.Furniture.Misc campfire:
c:..."Cooking Pot"::CreateTile.Furniture.Misc cooking_pot:
c:..."Cannon"::CreateTile.Furniture.Misc cannon:
c:..."Lunar Monolith"::CreateTile.Furniture.Misc monolith:
c:..."Sink"::CreateTile.Furniture.Misc sink:
c:..."Water Fountain"::CreateTile.Furniture.Misc water_fountain:
c:..."Planter Box"::CreateTile.Furniture.Misc planter:
# decorative
c:..."Beachstuff"::CreateTile.Furniture.Misc beachstuff:
c:..."Bowl"::CreateTile.Furniture.Misc bowl:
c:..."Crate"::CreateTile.Furniture.Misc crate:
c:..."Alphabet Statue"::CreateTile.Furniture.Misc alphabet_statue:
c:..."Statue":: CreateTile.Furniture.Misc statue:
c:..."Tombstone"::CreateTile.Furniture.Misc tombstone:

c:."Block":::
c:.."Wood"::CreateTile.Block wood:

c:."Wall"::Property create_wall:
c:.."Wallpaper":::

c:"Consumable"::Types consumable:type stack
c:."Food"::Consumable food:buffTime value type stack
c:."Flask"::Consumable flask:value type stack
c:."Potion"::UseStyle use_style_2, Consumable !food !flask:
c:.."Restoration"::Property heal_life heal_mana:"healLife" "healMana" "type" "stack"
c:.."Healing"::Property heal_life:"healLife" "type" "stack"
c:.."Mana"::Property heal_mana:"healMana" "type" "stack"
c:.."Buff"::Property buff_time:"buffType" "buffTime" "type" "stack"

c:"Dye"::Property.Ident dye:value name type stack
c:."Basic"::Dye basic:
c:."Black Compound"::Dye black:
c:."Silver Compound"::Dye silver:
c:."Gradient"::Dye gradient:
c:."Flame"::Dye flame:
c:."Bright"::Dye bright:
c:."Strange"::Dye strange:
c:."Lunar"::Dye lunar:

c:"Equipable"::Types equipable:rare, type, value
c:."Grappling Hook"::Equipable grapple:
c:."Mount"::Equipable mount:
c:."Mine Cart"::Equipable minecart:
c:."Light Pet"::Equipable light_pet:
c:."Pet"::Equipable vanity_pet:

#TODO: experimental: if match=false, then items that match this category's requirements but not any of its
#children will NOT be considered matched and will continue to be checked against any remaining categories
c:."Armor":match=false:Property !vanity:
c:.."Helm"::EquipSlot head:
c:.."Cuirass"::EquipSlot body:
c:.."Greaves"::EquipSlot leg:

c:."Accessory"::Property accessory !vanity:
c:.."Wings"::EquipSlot wings:
c:.."Balloon"::EquipSlot balloon:
c:.."Neckwear"::EquipSlot neck:
c:.."Shields"::EquipSlot shield:
c:.."Boots"::EquipSlot shoe:
c:.."Face Accessory"::EquipSlot face:
c:.."Belt Accessory"::EquipSlot waist:
c:.."Back Accessory"::EquipSlot back:
# Note: there are none of these in Vanilla:
c:.."Front Accessory"::EquipSlot front:

c:.."Main-Hand Gauntlet"::EquipSlot main_hand:
c:.."Off-Hand Gauntlet"::EquipSlot off_hand:
u:.."Gauntlets":merge=true:"Main-Hand Gauntlet", "Off-Hand Gauntlet":


c:.."Vanity Item"::Property vanity:

c:..."Vanity Clothing":::
c:...."Headwear"::EquipSlot head:
c:...."Shirt"::EquipSlot body:
c:...."Pants"::EquipSlot leg:

c:..."Vanity Accessory"::Property accessory:
c:...."Vanity Wings"::EquipSlot wings:
c:...."Fashion Facewear"::EquipSlot face:
c:...."Vanity Neckwear"::EquipSlot neck:
c:...."Vanity Boots"::EquipSlot shoe:
# Note about capes/cloaks:
# Theyre the ONLY vanilla items that have a value for 'frontSlot',
# but they're also the only vanilla VANITY items that have a value for
# 'backSlot'. So...yeah.
c:...."Capes"::EquipSlot front back:

# Note: there are none of the following 3 types in Vanilla
c:...."Vanity Balloon"::EquipSlot balloon:
c:...."Vanity Belt"::EquipSlot waist:
c:...."Vanity Shield"::EquipSlot shield:

# Note: there are none* of the following 2 types in Vanilla
# *see note above about Capes
c:...."Back Vanity Slot"::EquipSlot back:
c:...."Front Vanity Slot"::EquipSlot front:

c:...."Main-Hand Glove"::EquipSlot main_hand:
c:...."Off-Hand Glove"::EquipSlot off_hand:

u:...."Gloves":merge=true:"Main-Hand Glove", "Off-Hand Glove":
